{"/app/app/config/passport.js":{"size":6052,"mtime":1509189120096,"hashOfConfig":"u71bin","results":{"filePath":"/app/app/config/passport.js","messages":[],"errorCount":0,"warningCount":0,"output":"'use strict'\n\n// load all the things we need\nvar LocalStrategy = require('passport-local').Strategy\nvar TwitterStrategy = require('passport-twitter').Strategy\n\n// load up the user model\nvar User = require('../models/users')\n\n// expose this function to our app using module.exports\nmodule.exports = function (passport) {\n    // =========================================================================\n    // passport session setup ==================================================\n    // =========================================================================\n    // required for persistent login sessions\n    // passport needs ability to serialize and unserialize users out of session\n\n    // used to serialize the user for the session\n  passport.serializeUser(function (user, done) {\n    done(null, user.id)\n  })\n\n    // used to deserialize the user\n  passport.deserializeUser(function (id, done) {\n    User.findById(id, function (err, user) {\n      done(err, user)\n    })\n  })\n\n  passport.use('local-signup', new LocalStrategy({\n        // by default, local strategy uses username and password, we will override with email\n    usernameField: 'email',\n    passwordField: 'password',\n    passReqToCallback: true // allows us to pass back the entire request to the callback\n  },\n    function (req, email, password, done) {\n        // asynchronous\n        // User.findOne wont fire unless data is sent back\n      process.nextTick(function () {\n        // find a user whose email is the same as the forms email\n        // we are checking to see if the user trying to login already exists\n        User.findOne({ 'local.email': email }, function (err, user) {\n            // if there are any errors, return the error\n          if (err) {\n            return done(err)\n          }\n\n            // check to see if theres already a user with that email\n          if (user) {\n            return done(null, false, req.flash('signupMessage', 'That email is already taken.'))\n          } else {\n                // if there is no user with that email\n                // create the user\n            var newUser = new User()\n\n                // set the user's local credentials\n            newUser.local.email = email\n            newUser.local.password = newUser.generateHash(password)\n\n                // save the user\n            newUser.save(function (err) {\n              if (err) { throw err }\n              return done(null, newUser)\n            })\n          }\n        })\n      })\n    }))\n  // =========================================================================\n    // LOCAL LOGIN =============================================================\n    // =========================================================================\n    // we are using named strategies since we have one for login and one for signup\n    // by default, if there was no name, it would just be called 'local'\n\n  passport.use('local-login', new LocalStrategy({\n        // by default, local strategy uses username and password, we will override with email\n    usernameField: 'email',\n    passwordField: 'password',\n    passReqToCallback: true // allows us to pass back the entire request to the callback\n  },\n    function (req, email, password, done) { // callback with email and password from our form\n        // find a user whose email is the same as the forms email\n        // we are checking to see if the user trying to login already exists\n      User.findOne({ 'local.email': email }, function (err, user) {\n            // if there are any errors, return the error before anything else\n        if (err) { return done(err) }\n\n            // if no user is found, return the message\n        if (!user) { return done(null, false, req.flash('loginMessage', 'No user found.')) } // req.flash is the way to set flashdata using connect-flash\n\n            // if the user is found but the password is wrong\n        if (!user.validPassword(password)) { return done(null, false, req.flash('loginMessage', 'Oops! Wrong password.')) } // create the loginMessage and save it to session as flashdata\n\n            // all is well, return successful user\n        return done(null, user)\n      })\n    }))\n\n    // =========================================================================\n    // TWITTER =================================================================\n    // =========================================================================\n  passport.use(new TwitterStrategy({\n\n    consumerKey: process.env.twitterConsumerKey,\n    consumerSecret: process.env.twitterConsumerSecret,\n    callbackURL: process.env.twitterConsumerCallbackURL\n\n  },\n    function (token, tokenSecret, profile, done) {\n        // make the code asynchronous\n    // User.findOne won't fire until we have all our data back from Twitter\n      process.nextTick(function () {\n        User.findOne({ 'twitter.id': profile.id }, function (err, user) {\n                // if there is an error, stop everything and return that\n                // ie an error connecting to the database\n          if (err) { return done(err) }\n\n                // if the user is found then log them in\n          if (user) {\n            return done(null, user) // user found, return that user\n          } else {\n                    // if there is no user, create them\n            var newUser = new User()\n\n                    // set all of the user data that we need\n            newUser.twitter.id = profile.id\n            newUser.twitter.token = token\n            newUser.twitter.username = profile.username\n            newUser.twitter.displayName = profile.displayName\n\n                    // save our user into the database\n            newUser.save(function (err) {\n              if (err) { throw err }\n              return done(null, newUser)\n            })\n          }\n        })\n      })\n    }))\n}\n"}},"/app/app/models/users.js":{"size":915,"mtime":1509189750052,"hashOfConfig":"u71bin","results":{"filePath":"/app/app/models/users.js","messages":[],"errorCount":0,"warningCount":0,"output":"'use strict'\n\nvar mongoose = require('mongoose')\nvar bcrypt = require('bcrypt-nodejs')\n\n// define the schema for our user model\nvar userSchema = mongoose.Schema({\n\n  local: {\n    email: String,\n    password: String\n  },\n  twitter: {\n    id: String,\n    token: String,\n    displayName: String,\n    username: String\n  }\n\n  // change user collection to use one sandbox DB for multiple projects\n}, { collection: 'fccBuildPinterestCloneUser' })\n\n// methods ======================\n// generating a hash\nuserSchema.methods.generateHash = function (password) {\n  return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null)\n}\n\n// checking if password is valid\nuserSchema.methods.validPassword = function (password) {\n  return bcrypt.compareSync(password, this.local.password)\n}\n\n// create the model for users and expose it to our app\nmodule.exports = mongoose.model('User', userSchema)\n"}},"/app/app/models/pins.js":{"size":284,"mtime":1509187454136,"hashOfConfig":"u71bin","results":{"filePath":"/app/app/models/pins.js","messages":[],"errorCount":0,"warningCount":0}}}